Must have рівень: 


1. Зроби порівняння статичних та динамічних технік тестування. Наведи переваги та можливі обмеження при використанні кожної з них. 




	Статистична техніка тестування
	Динамічна техніка тестування
	Основна інформація
	Є методикою тестування ПЗ без запуску коду. Їх використовують для пошуку потенційних дефектів ПЗ і також це є процес виявлення та усунення помилок і дефектів на різних супровідних документах, таких як специфікації вимог до програмного забезпечення
	це тип тестування який передбачає за собою запуск коду. повдінка аналізуєтся під час її дії.


	Перевага №1
	Знижує вартість “ремонту” знайдених багів
	забезпечує більш точні дані про продуктивність та функціональність програми
	Перевага №2
	ідентифікація дефектів які складно виявити при динамічному тестуванні
	дозволяє виявити помилки, пов'язані з виконанням програми та взаємодією компонентів
	Перевага №3 (і т.д.)
	покращення комунікацій між членами команди у процессі тестування та розробки
	

	Обмеження №1
	Вимагає більше часу та зусиль.
	Може не виявити деякі помилки, які можуть бути виявлені статичними техніками
	Обмеження №2
	не може забезпечити повного тестування усіх шляхів програми
	Вимагає повного або часткового виконання програми, що може зайняти багато часу при великих проектах
	Обмеження №3 (і т.д.)
	

	

	Висновок
	для кращого тестуання буде краще використовувати обидва види тестування бо з ними азом можно знайти більшість багів
	

	

	Середній рівень:


1. Виконай завдання попереднього рівня.
2. Наступне твердження стосується покриття рішень:
Коли код має одну ‘IF” умову, не має циклів (LOOP)  або перемикачів (CASE), будь-який тест, який ми виконаємо, дасть результат 50% покриття рішень (decision coverage). 


Яке твердження є коректним?
   1. Коректно. Будь-який тест кейс надає 100% покриття тверджень, таким чином покриває 50% рішень.
   2. Коректно. Результат будь-якого тесту умови IF буде або правдими, або ні.
   3. Некоректно. Один тест може гарантувати 25% перевірки рішень в цьому випадку.
   4. Некоректно, бо занадто загальне твердження. Ми не можемо знати, чи є воно коректним, бо це залежить від тестованого ПЗ.


3. Є псевдокод: Switch PC on -> Start MS Word -> IF MS Word starts THEN -> Write a poem -> Close MS Word. 


Скільки тест кейсів знадобиться, щоб перевірити його функціонал? 
   5. 1 – для покриття операторів, 2 – для покриття рішень
   6. 1 – для покриття операторів, 1 – для покриття рішень
   7. 2 – для покриття операторів, 2 – для покриття рішень
   8. 2 – для покриття операторів, 1 – для покриття рішень


4. Скільки потрібно тестів для перевірки тверджень коду:      
   1. 2
   2. 1
   3. 3
   4. 4 TC1: P=60, Q=50, TC2: P=40,Q=50,TC3: P=55, TC4:P=40
	Програма максимум:


   1. Виконай завдання двох попередніх рівнів.
   2. Продовжуємо розвивати стартап для застосунку, який дозволяє обмінюватися фотографіями котиків.


Є алгоритм: 
Запитай, якого улюбленця має користувач. 
Якщо користувач відповість, що має кота, то запитай, яка порода його улюбленця: «короткошерста чи довгошерста?»
Якщо клієнт відповість «довгошерста», то запитай: «ви бажаєте отримати контакти найближчого грумера?»
Якщо клієнт відповість «так», то скажи: «Надайте адресу найближчої котячої перукарні»
Інакше
Скажи: «Запропонуй магазин з товарами по догляду за шерстю»
Закінчити
Інакше
Скажи «Запропонуй обрати магазин із зоотоварами»
Закінчити
Якщо клієнт не має кота
Скажи “Коли вирішите завести улюбленця – приходьте”
Закінчити


Завдання:
   1. Намалюй схему алгоритму (в інструменті на вибір, наприклад, у вбудованому Google Docs редакторі, figjam чи miro)
   2. Який потрібен мінімальний набір тест-кейсів, щоб переконатися, що всі запитання були поставлені, всі комбінації були пройдені та всі відповіді були отримані?


   1. https://miro.com/app/board/uXjVMw-6BY0=/?share_link_id=168260462274 
   2.